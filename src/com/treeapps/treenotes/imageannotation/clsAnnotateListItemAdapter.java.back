package com.example.spacesavertreeview.imageannotation;

import java.util.ArrayList;

import com.example.spacesavertreeview.R;
import com.example.spacesavertreeview.clsUtils;
import com.example.spacesavertreeview.clsTreeview.clsTreeNode;
import com.example.spacesavertreeview.imageannotation.clsAnnotationData.clsAnnotationItem;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.provider.MediaStore;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import android.net.Uri;

public class clsAnnotateListItemAdapter extends ArrayAdapter<clsAnnotationItem>
										implements Filterable 
{
	int resource;
	Context context;
	
	ArrayList<clsAnnotationItem> objListItems;
	ArrayList<clsAnnotationItem> filteredItems;
	
	// used for selection of entries
	clsAnnotationItem prevListItem;
	
	private Filter filter;
	
	//private String imageDirectory;
	private Bitmap thumbnailBitmap;
	
	private ImageView myPreviewImageView;
	
	private clsAnnotationData annotationData;
	
	public clsAnnotateListItemAdapter(Context context, int _resource, ArrayList<clsAnnotationItem> objects,
										Bitmap thumbnail, 
										/* Next parameter necessary for creating annotated image. ArrayList<clsAnnotationItem>
										 * should be removed when this class runs entirely on clsAnnotationData  
										 */
										clsAnnotationData origData) 
	{
		super(context, _resource, objects);
		
		this.context    = context;
		resource        = _resource;
		objListItems    = objects;
		thumbnailBitmap = thumbnail;
		
		annotationData = origData;
		
		filteredItems = new ArrayList<clsAnnotationItem>();
		
		prevListItem = null;
	}
	
	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		
		 RelativeLayout todoView;
		 
		 clsAnnotationItem objListItem = getItem(position);
		 if (convertView == null) {
		      todoView = new RelativeLayout(getContext());

		      LayoutInflater li;
		      li = (LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		      li.inflate(resource, todoView, true);
		 } else {
			 todoView = (RelativeLayout) convertView;
		 }
		  
		 todoView.setTag(objListItem);
		 
		 myPreviewImageView = (ImageView)todoView.findViewById(R.id.media_preview);
		 myPreviewImageView.setTag(objListItem);
		 myPreviewImageView.setOnClickListener(new MyPreviewOnClickListener());
		 
		 TextView myTextView = (TextView)todoView.findViewById(R.id.row);
		 myTextView.setTag(objListItem);
		 myTextView.setText(objListItem.getAnnotationText());
		 myTextView.setOnClickListener(new MyTextOnClickListener());

		 switch(objListItem.getResourceId())
		 {
		 	case clsAnnotationData.EDIT_ANNOTATION_IMAGE:
		 		myPreviewImageView.setVisibility(View.VISIBLE);
		 		
		 		// Do not try to decode the file for the thumbnail here. It will randomly
		 		// create a SegFault.
	 			myPreviewImageView.setImageBitmap(thumbnailBitmap);
		 		
		 		break;
		 			
		 	case clsAnnotationData.EDIT_ANNOTATION_TEXT:
		 		
		 		// hide preview image
		 		myPreviewImageView.setVisibility(View.GONE);
				break;
		 		
		 	default:
		 		Toast.makeText(context, "ResourceID not supported in AnnotateImageActivity", Toast.LENGTH_SHORT)
		 			 .show();
		 		break;
		 }
		 
		 /*if(objListItem.getSelected()){
			// Note: There is another one in MyTextView.java that does that view only because it has higher z-order
			  todoView.setBackgroundResource(R.drawable.listitem_selected_shape);
		  } else{
			  todoView.setBackgroundResource(R.drawable.listitem_unselected_shape);
		  }*/
		 
		return todoView;
	}

	// Create a custom filter to restrict visibility of elements in list
	@Override
	public Filter getFilter()
	{
		if(filter == null)
		{
			filter = new ItemFilter();
		}
		return filter;
	}
	
	// return the number of elements in the filtered array list
	@Override
	public int getCount()
	{
		return filteredItems.size();
	}
	
	// return an element from the filtered array list
	@Override
	public clsAnnotationItem getItem(int position)
	{
		return filteredItems.get(position);
	}
	
	private class ItemFilter extends Filter
	{
		@Override
		protected FilterResults performFiltering(CharSequence constraint)
		{
			FilterResults results = new FilterResults();
			
			// hide all entries of objListItems which have no annotation text
			filteredItems.clear();
			for(clsAnnotationItem item : objListItems)
			{
				if(!item.getAnnotationText().isEmpty() || item.getResourceId() == clsAnnotationData.EDIT_ANNOTATION_IMAGE)
				{
					filteredItems.add(item);
				}
			}
			
			results.values = filteredItems;
			results.count  = filteredItems.size();
			
			return results;
		}
		
		@Override
		protected void publishResults(CharSequence constraint, FilterResults results)
		{
			notifyDataSetChanged();
		}
	}
	
	// class used on single click on image/video thumbnail
	private class MyPreviewOnClickListener implements View.OnClickListener, clsCombineAnnotateImage.TaskCompletedInterface
	{
		// implementation of interface clsCombineAnnotateImage.TaskCompletedInterface
		// objTreeNode not used
		public void loadTaskComplete(String combinedFile, clsTreeNode objTreeNode)
		{
			String t = "file://" + combinedFile;

			// start external viewer 
    		Intent img_intent = new Intent();
    		img_intent.setAction(Intent.ACTION_VIEW);
			img_intent.setDataAndType(Uri.parse(t), "image/*");
    		
    		context.startActivity(img_intent);
		}
		
		@Override
		public void onClick(View v) {
			
	        // the folder has access to all object data via TAG
			ImageView folder = (ImageView)v.findViewById(R.id.media_preview);
	        clsAnnotationItem objListItem = (clsAnnotationItem)folder.getTag();
			
    		String contentString = objListItem.getResourcePath();
    		
	        switch(objListItem.getResourceId())
	        {
	        	case clsAnnotationData.EDIT_ANNOTATION_IMAGE:
        			
        		if(contentString.startsWith("/", 0))
        		{
					String resPath = getLocalPathFromUri(objListItem.getResourceId(),
														Uri.parse(contentString));
						
					if(!resPath.isEmpty())
					{
						contentString = "file://" + resPath;
					}
					else
					{
						Toast.makeText(context, "Resourcepath is empty", Toast.LENGTH_SHORT).show();// Problem
						return;
					}
        		}

    			new clsCombineAnnotateImage(context, this).createAnnotatedImage(contentString, annotationData);
        		break;
	        		
	        	default:
	        		clsUtils.CustomLog("Resource not supported in AnnotateImageActivity");
	        		assert(false);
	        		break;
	        }
		}
		
		// helper: retrieve the path of a resource from the internal database
		// by using the URI
		private String getLocalPathFromUri(int resourceId, Uri uri)
		{
			String path = "";
    		String[] filePathColumn;
    		Cursor cursor;
    		int columnIndex;
			
			switch(resourceId)
			{
				case clsAnnotationData.EDIT_ANNOTATION_IMAGE:
				{
		    		filePathColumn = new String[1];
					filePathColumn[0] = MediaStore.Images.Media.DATA;
				}
				break;
					
				default:
					assert(false);
					return path;
			}

			// retrieve the file path from the database
			cursor = context.getContentResolver().query(
								uri,filePathColumn, 
								null, null, null);
		
			if(cursor != null)
			{					
				if(cursor.moveToFirst())
				{
					columnIndex = cursor.getColumnIndex(filePathColumn[0]);
			
					path = cursor.getString(columnIndex);
			
					cursor.close();
				}
				else
				{
 					// show error dialog because file could not be found
        		 	AlertDialog.Builder builder = new AlertDialog.Builder(context);
        		    builder.setMessage(R.string.dlg_error_file_not_found);
        		    
        		    builder.setPositiveButton("OK", new DialogInterface.OnClickListener() 
        		    {
        	            public void onClick(DialogInterface dialog, int id) 
        	            {

        	            }
        	        });
        		    
        		    AlertDialog dialog = builder.create();
        		    dialog.show();         					
				}
			}

			return path;
		}
	}
	
	// actions taken if an entry of the list is clicked
	private class MyTextOnClickListener implements View.OnClickListener{
		@Override
		public void onClick(View v) {
			
	        clsAnnotationItem objListItem = (clsAnnotationItem)v.getTag();
	        
        	((ActivityAnnotateImage)context).handleItemSelected(objListItem);
		}
	}
}
